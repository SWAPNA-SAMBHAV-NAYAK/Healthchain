type Time = int;
type ProfileData = 
 record {
   address: text;
   age: text;
   contact: text;
   email: text;
   gender: text;
   image: vec nat8;
   name: text;
   user_principal: principal;
   user_type: text;
 };
type Patient = 
 record {
   address: text;
   age: int;
   blood_group: text;
   email: text;
   gender: text;
   height: float64;
   name: text;
   patient_id: text;
   phone_number: text;
   registered_on: Time;
   weight: float64;
 };
type Notice = 
 record {
   from: text;
   notice: text;
   time_stamp: Time;
 };
type Employee = 
 record {
   contact: text;
   date_of_joining: text;
   email: text;
   employee_id: text;
   first_name: text;
   last_name: text;
   salary: int;
 };
type DoctorOpenHours = 
 record {
   doctor_id: text;
   openHoursDates: vec text;
   openHoursTime: vec vec text;
 };
type Doctor = 
 record {
   address: text;
   age: int;
   department: text;
   designation: text;
   doctor_id: text;
   email: text;
   gender: text;
   name: text;
   phone_number: text;
   qualification: text;
   registered_on: Time;
 };
type Appointment = 
 record {
   appointment_id: text;
   date: text;
   doctor_id: text;
   patient_id: text;
   time_slot: text;
 };
service : {
  addDoctorOpenHours: (text, vec text, vec vec text) -> ();
  createAppointment: (text, text, text, text, text) -> () oneway;
  createDoctor: (text, text, text, text, int, text, text, text, text,
   text) -> () oneway;
  createEmployee: (text, text, text, text, text, int, text) -> () oneway;
  createNotice: (text, text) -> () oneway;
  createPatient: (text, text, text, text, int, text, text, float64, float64,
   text) -> () oneway;
  createProfile: (text, text, text, text, text, text, vec nat8) -> () oneway;
  deleteEmployee: (text) -> () oneway;
  getDoctorById: (text) -> (opt Doctor);
  readAppointments: () -> (vec Appointment) query;
  readDepartments: () -> (vec text) query;
  readDoctors: () -> (vec Doctor) query;
  readEmployees: () -> (vec Employee) query;
  readNotices: () -> (vec Notice) query;
  readOpenHours: () -> (vec DoctorOpenHours) query;
  readPatients: () -> (vec Patient) query;
  readProfileData: () -> (opt ProfileData);
  updateDoctor: (text, Time, text, text, text, int, text, text, text, 
   text, text) -> () oneway;
  updateEmployee: (text, text, text, text, text, int, text) -> () oneway;
  updatePatient: (text, Time, text, text, text, int, text, text, float64,
   float64, text) -> () oneway;
  updateUserType: (principal, text) -> ();
}

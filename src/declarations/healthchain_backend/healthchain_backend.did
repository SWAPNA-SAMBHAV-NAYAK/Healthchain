type Time = int;
type ProfileData = 
 record {
   address: text;
   age: text;
   contact: text;
   email: text;
   gender: text;
   image: vec nat8;
   name: text;
   registered_on: Time;
   user_principal: principal;
   user_type: text;
 };
type Notification = 
 record {
   for_id: principal;
   notification: text;
   time_stamp: Time;
 };
type Notice = 
 record {
   from_id: principal;
   from_name: text;
   notice_content: text;
   notice_title: text;
   time_stamp: Time;
 };
type MedicalLog = 
 record {
   additional_notes: text;
   blood_group: text;
   blood_pressure: int;
   doctor_id: principal;
   doctor_name: text;
   height: float64;
   medications: text;
   patient_id: principal;
   pulse_rate: float64;
   spo2: int;
   temperature: float64;
   time_stamp: Time;
   weight: float64;
 };
type LiverReport = 
 record {
   age: int;
   alamine_amino_transferase: int;
   albumin_globulin_ratio: float64;
   alkaline_phosphatase: int;
   done_by: principal;
   gender: text;
   outcome: text;
   patient_id: principal;
   report_id: text;
   time_stamp: Time;
   total_bilirubin: float64;
 };
type HeartReport = 
 record {
   age: int;
   chest_pain_type: text;
   cholesterol: int;
   done_by: principal;
   exercise_induced_angina: text;
   fasting_blood_sugar: int;
   max_heart_rate: int;
   old_peak: float64;
   outcome: text;
   patient_id: principal;
   peak_exercise_slope: text;
   report_id: text;
   resting_bp: int;
   resting_ecg: text;
   sex: text;
   time_stamp: Time;
 };
type Employee = 
 record {
   contact: text;
   date_of_joining: text;
   email: text;
   employee_id: text;
   first_name: text;
   last_name: text;
   salary: int;
 };
type DoctorOpenHours = 
 record {
   doctor_id: principal;
   openHoursDates: vec text;
   openHoursTime: vec vec text;
 };
type DoctorMetaData = 
 record {
   department: text;
   designation: text;
   doctor_id: principal;
   qualification: text;
 };
type Appointment = 
 record {
   appointment_id: text;
   date: text;
   doctor_id: principal;
   doctor_name: text;
   patient_id: principal;
   patient_name: text;
   time_slot: text;
 };
service : {
  createAppointment: (text, text, text, text, text) -> () oneway;
  createAppointmentPatientSide: (text, text, text, text) -> () oneway;
  createEmployee: (text, text, text, text, text, int, text) -> () oneway;
  createHeartReport: (text, int, text, text, int, int, int, text, int, 
   text, float64, text, text) -> () oneway;
  createLiverReport: (text, int, text, float64, int, int, float64, text) ->
   () oneway;
  createMedicalLog: (text, float64, int, int, float64, text, text, text,
   float64, float64) -> () oneway;
  createNotice: (text, text) -> () oneway;
  createOrUpdateDoctorMetaData: (principal, text, text, text) -> () oneway;
  createOrUpdateDoctorOpenHours: (vec text, vec vec text) -> ();
  createProfile: (text, text, text, text, text, text, vec nat8) ->
   (ProfileData);
  deleteEmployee: (text) -> () oneway;
  getDoctorById: (text) -> (opt ProfileData) query;
  getDoctorMetaDataById: (text) -> (opt DoctorMetaData) query;
  getPatientById: (text) -> (opt ProfileData) query;
  getPatientMedicalLogsAccessList: () -> (vec principal) query;
  getTextTimeStampFromEpoch: (Time) -> (text) query;
  giveMedicalLogAccess: (principal) -> () oneway;
  hasAccessToPatientMedicalLogs: (text) -> (bool) query;
  readAllAppointments: () -> (vec Appointment) query;
  readDepartments: () -> (vec text) query;
  readDoctorAppointments: () -> (vec Appointment) query;
  readDoctorMetaData: () -> (vec DoctorMetaData) query;
  readDoctors: () -> (vec ProfileData) query;
  readEmployees: () -> (vec Employee) query;
  readHeartReportByPatientId: (text) -> (vec HeartReport) query;
  readHeartReportDataTimeStamps: () -> (vec Time) query;
  readLiverReportByPatientId: (text) -> (vec LiverReport) query;
  readLiverReportDataTimeStamps: () -> (vec Time) query;
  readMedicalLogs: (text) -> (vec MedicalLog) query;
  readNotices: () -> (vec Notice) query;
  readNotifications: () -> (vec Notification) query;
  readOpenHours: () -> (vec DoctorOpenHours) query;
  readOpenHoursById: (text) -> (opt DoctorOpenHours) query;
  readPatientAppointments: () -> (vec Appointment) query;
  readPatients: () -> (vec ProfileData) query;
  readProfileData: () -> (opt ProfileData) query;
  readProfileDataTimeStamps: () -> (vec Time) query;
  revokeMedicalLogAccess: (principal) -> () oneway;
  updateEmployee: (text, text, text, text, text, int, text) -> () oneway;
  updateUserType: (principal, text) -> () oneway;
}
